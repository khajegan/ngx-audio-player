import { OnInit, ElementRef, OnChanges, SimpleChanges } from '@angular/core';
import { Track } from '../../model/track.model';
import { MatLegacySlider as MatSlider } from '@angular/material/legacy-slider';
import { MatLegacyTableDataSource as MatTableDataSource } from '@angular/material/legacy-table';
import { MatLegacyPaginator as MatPaginator } from '@angular/material/legacy-paginator';
import { AudioPlayerService } from '../../service/audio-player-service/audio-player.service';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class AudioPlayerComponent implements OnInit, OnChanges {
    audioPlayerService: AudioPlayerService;
    repeat: string;
    constructor(elem: ElementRef);
    set playlist(playlist: Track[]);
    set matPaginator(mp: MatPaginator);
    displayedColumns: string[];
    dataSource: MatTableDataSource<Track>;
    paginator: MatPaginator;
    timeLineDuration: MatSlider;
    tracks: Track[];
    displayTitle: boolean;
    displayPlaylist: boolean;
    displayVolumeControls: boolean;
    displayRepeatControls: boolean;
    pageSizeOptions: number[];
    expanded: boolean;
    autoPlay: boolean;
    disablePositionSlider: boolean;
    displayArtist: boolean;
    displayDuration: boolean;
    tableHeader: string;
    titleHeader: string;
    artistHeader: string;
    durationHeader: string;
    currentIndex: number;
    trackEnded: Subject<string>;
    player: ElementRef;
    iOS: boolean;
    loaderDisplay: boolean;
    isPlaying: boolean;
    currentTime: number;
    volume: number;
    duration: number;
    private startOffsetValue;
    set startOffset(seconds: number);
    get startOffset(): number;
    endOffset: number;
    currTimePosChanged(event: any): void;
    bindPlayerEvent(): void;
    playBtnHandler(): void;
    play(track?: Track): void;
    toggleVolume(): void;
    toggleRepeat(): void;
    private setVolume;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private buildDisplayedColumns;
    initialize(): void;
    setDataSourceAttributes(): void;
    nextSong(): void;
    previousSong(): void;
    resetSong(): void;
    selectTrack(index: number): void;
    checkIfSongHasStartedSinceAtleastTwoSeconds(): boolean;
    updateCurrentTrack(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AudioPlayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AudioPlayerComponent, "mat-advanced-audio-player,ngx-audio-player", never, { "playlist": "playlist"; "displayTitle": "displayTitle"; "displayPlaylist": "displayPlaylist"; "displayVolumeControls": "displayVolumeControls"; "displayRepeatControls": "displayRepeatControls"; "pageSizeOptions": "pageSizeOptions"; "expanded": "expanded"; "autoPlay": "autoPlay"; "disablePositionSlider": "disablePositionSlider"; "displayArtist": "displayArtist"; "displayDuration": "displayDuration"; "tableHeader": "tableHeader"; "titleHeader": "titleHeader"; "artistHeader": "artistHeader"; "durationHeader": "durationHeader"; "startOffset": "startOffset"; "endOffset": "endOffset"; }, { "trackEnded": "trackEnded"; }, never, never, false, never>;
}
